import React, { useState, useEffect } from 'react';
import { useRouter } from 'expo-router';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  Alert,
  TouchableOpacity,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from '../../context/AuthContext'; 

const API = 'http://192.168.100.174:5000';

type AttendanceRecord = {
  _id: string;
  userId: {
    _id: string;
    name: string;
    email: string;
  } | null;
  signedInAt?: string;
  signedOutAt?: string;
};

export default function AuthAttendanceScreen() {
  const router = useRouter();
  const { token, logout } = useAuth(); // ✅ From context
  const [userName, setUserName] = useState('');
  const [attendance, setAttendance] = useState<AttendanceRecord[]>([]);

  const fetchToday = async () => {
    try {
      const res = await fetch(`${API}/today`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const data = await res.json();
      setAttendance(Array.isArray(data) ? data : []);
    } catch {
      setAttendance([]);
    }
  };

  const handleSignIn = async () => {
    try {
      const res = await fetch(`${API}/attendance/signin`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });

      const data = await res.json();
      if (!res.ok) {
        Alert.alert('Sign In Failed', data.message || 'Already signed in today');
        return;
      }

      Alert.alert('Success', data.message || 'Signed in');
      fetchToday();
    } catch {
      Alert.alert('Error', 'Something went wrong');
    }
  };

  const handleSignOut = async () => {
    try {
      const res = await fetch(`${API}/attendance/signout`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });

      const data = await res.json();
      if (!res.ok) {
        Alert.alert('Sign Out Failed', data.message || 'Already signed out or not signed in yet');
        return;
      }

      Alert.alert('Success', data.message || 'Signed out');
      fetchToday();
    } catch {
      Alert.alert('Error', 'Something went wrong');
    }
  };

  useEffect(() => {
    if (token) fetchToday();
  }, [token]);

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <View style={styles.card}>
        <View style={styles.logoutRow}>
          <Text style={styles.title}>Welcome! {userName}</Text>
          <TouchableOpacity onPress={logout}>
            <Ionicons name="log-out-outline" size={28} color="gray" />
          </TouchableOpacity>
        </View>

        <View style={styles.buttonRow}>
          <View style={styles.leftButtons}>
            <TouchableOpacity
              style={[styles.button, styles.signIn]}
              onPress={handleSignIn}
            >
              <Text style={styles.buttonText}>Sign In</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.button, styles.signOut]}
              onPress={handleSignOut}
            >
              <Text style={styles.buttonText}>Sign Out</Text>
            </TouchableOpacity>
          </View>

          <TouchableOpacity
            style={[styles.button, styles.rightButton]}
            onPress={() => router.push('/(drawer)/records')}
          >
            <Text style={styles.buttonText}>Show Records</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.space} />
        <Text style={styles.subtitle}>Today's Attendance</Text>
        {attendance.length === 0 ? (
          <Text>No records found.</Text>
        ) : (
          <View style={styles.tableContainer}>
            <View style={styles.tableHeader}>
              <Text style={[styles.tableCell, styles.headerText]}>Date</Text>
              <Text style={[styles.tableCell, styles.headerText]}>Signed In</Text>
              <Text style={[styles.tableCell, styles.headerText]}>Signed Out</Text>
            </View>
            {attendance.map((record) => {
              const date = new Date(record.signedInAt || record.signedOutAt || '').toLocaleDateString();
              const signedIn = record.signedInAt ? new Date(record.signedInAt).toLocaleTimeString() : '-';
              const signedOut = record.signedOutAt ? new Date(record.signedOutAt).toLocaleTimeString() : '-';

              return (
                <View key={record._id} style={styles.tableRow}>
                  <Text style={styles.tableCell}>{date}</Text>
                  <Text style={styles.tableCell}>{signedIn}</Text>
                  <Text style={styles.tableCell}>{signedOut}</Text>
                </View>
              );
            })}
          </View>
        )}
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, flexGrow: 1, alignItems: 'center' },
  card: {
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 20,
    width: '100%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 5,
  },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 10 },
  subtitle: { fontSize: 18, marginTop: 20, fontWeight: '600' },
  space: { height: 10 },
  tableContainer: {
    marginTop: 15,
    backgroundColor: '#f9f9f9',
    borderRadius: 10,
    padding: 10,
    width: '100%',
  },
  tableHeader: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
    paddingBottom: 6,
    marginBottom: 6,
  },
  tableRow: {
    flexDirection: 'row',
    marginBottom: 6,
  },
  tableCell: {
    flex: 1,
    fontSize: 12,
    color: '#444',
  },
  headerText: {
    fontWeight: 'bold',
    color: '#000',
  },
  logoutRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },

  // ✅ Final correct styles for button layout:
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 15,
  },
  leftButtons: {
    flexDirection: 'row',
    gap: 10,
  },
  rightButton: {
    backgroundColor: '#2196F3',
  },
  signIn: {
    backgroundColor: '#4CAF50',
  },
  signOut: {
    backgroundColor: '#f44336',
  },
  button: {
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderRadius: 8,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 14,
  },
});

